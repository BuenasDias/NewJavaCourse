package LessonLogicOperation;

public class LogicOperation {
    public static void main(String[] args) {

        // Познакомимся с логическими операциями поближе

        // Возьмем те же переменные, что были в прошлом уроке
        int a = 10;
        int b = 5;
        int c = 10;

        // Далее воспользуемся условным оператором if
        // Данный оператор используется наверное во всех языках программирования и его изучают как правило в самом начале обучения
        // Оператор if позволяет вашей программе в зависимости от условий выполнить оператор или группу операторов
        // Самая простая форма будет выглядеть так:

        //  if (условие) оператор;
        // Оператор выполнится только в том случае, если условие истинно то есть равно true

        // Давайте рассмотрим это на практике и сразу все станет понятно

        if (a > b) System.out.println("Этот код выполнится");

        if (a == b) System.out.println("Этот код не выполнится");

        // Сейчас мы рассмотрим более полную форму с условным оператором if, дело в том, что простая форма (показать простую форму)
        // она справедлива только в том случае, если у нас должен выполняться только один оператор
        // если у нас должно выполниться несколько операторов, то простая форма нам не подойдет
        // Более сложная форма, и та, которая используется чаще всего в программировании

//        if(условие){
//            оператор_1;
//            оператор_2;
//            ...
//            оператор_n;
//        }

        // Разберем данную форму на практике

        if (a > b) {
            System.out.println("Данный код будет выполнен");
            System.out.println("И данный код будет выполнен");
        }

        // Теперь наконец мы можем перейти к логическим операциям
        // Начнем с самых простых. Вообще данная тема очень важна, важна именно для понимания, потому что вы очень часто
        // будите пользоваться подобными конструкциями. Выполнять что то в зависимости от каких то условий приходится
        // повсеместно. В этом курсе вы узнаете и более сложные конструкции с условными операторами, и сможете строить более
        // разветвленные конструкции с большим количеством вариантов выполнения кода в зависимости от каких то условий.

        // Итак, приступим к практике (нужно степерь все до переменных)

        // (Этот код писать не нужно на видео)
        System.out.println(" ");
        System.out.println("-----------------");
        System.out.println(" ");

        if (a > b && b > c) {
            System.out.println("Первое выражение");
        }
        // как мы видим код не выполнился, разберем почему так произошло. Смотрим на условия , a > b - это true, смотрим далее
        // мы видим && - "и" смотрим далее, видим b > c - это false, значит слева от И у нас true, а справа false
        // оператор И требует чтобы условия слева и справа от него были true и только тогда операторы (код в теле оператора if) будет выполнен

        // Иначе данное выражение будет иметь вид

        if (true && false){
            System.out.println("Первое выражение");
        }

        // Или же

        if (false){
            System.out.println("Первое выражение");
        }

        // Второй пример
        if (a > b && b < c) {
            System.out.println("Второе выражение");
        }
        // Данный код будет выполнен, потому что и слева и справа от && у нас выражения выдают true

        if (true && true){
            System.out.println("Второе выражение");
        }


        // Далее рассмотрим оператор ИЛИ

        if (a > b || b > c) {
            System.out.println("Третье выражение");
        }
        // Рассмотрим подробнее , слева от ИЛИ у нас a > b что равняется true , а справа у нас b > c что равняется false
        // Оператору || достаточно одного true слева или справа чтобы тело if начало выполняться
        // Тело if не будет выполняться только в том случает если слева и справа от ИЛИ выражения будут выдавать false

        //например в данном случае
        if (a < b || a == b){
            System.out.println("Четвертое выражение");
        }
        
        // Далее рассмотрим оператор НЕ или ! (знак восклицания)
        // Запишем следующий пример
        if(!(a < b)) {
            System.out.println("Пятое выражение");
        }

        // что мы видим. В скобках (а < b) будет false, но если мы поставим перед скобками НЕ или ! то false поменяет свое значение на
        // противоположное, то есть на true и в теле if будут выполнены все команды, проверим, запустим нашу программу

        // Рассмотрим еще пример

        if( a != 9){
            System.out.println("Шестое выражение");
        }

        // В нашем случае "а" равняется 10 , поэтому в скобках у нас будет true, и поэтому все команды в теле if будут
        // выполнены

        // Мы разобрали основные операторы, которыми вы будите пользоваться чаще всего, скорее всего ежедневно, без них
        // сложно представить какой то более менее осмысленный код.

        // Следут отметить, что есть еще побитовые операторы, которые также встречаются в коде, но крайне редко.

        // Они используются для шифровки / дешифровки данных или же для
        // Реализации криптографических алгоритмов
        // Где то для сокращении времени работы программы

        // все это вам не потребуется, вожможно никогда вы с этим так и не столкнетесь, а тема действительно очень сложная
        // и не только для понимания, но и для реализации.


        // Итак, резюмируем все что мы прошли на этом уроке:
        // 1. Мы рассмотрели логические операторы, их виды и их запись
        // 2. Мы рассмотрели условный оператор if
        // теперь вы можете в зависимости от различных условий выполнять тот или иной код
        // весь пройденный материал нужно закрепить на практике, ниже под видео есть домашнее задание, поверьте моему
        // опыту, практика очень нужна, без практики, одной теории недостаточно, нужно все попробовать самому.


    }
}
