package LessonTernarniyOperator;

public class TernOperator {
    public static void main(String[] args) {

        // На данном уроке мы поговорим про тернарный оператор. Тема не сложная, периодически встречается на практике,
        // знать данную конструкцию нужно.

        // Тернарный - значит тройной оператор, это единственный оператор в java который принимается сразу три операнда.
        // Данный оператор часто используют вместо if-else.

        // Давайте рассмотрим синтаксис и сразу все станет понятно

        // Тернарный оператор имеет следующий вид:


        //  переменная х = логическое условие ? значение если условие true : значение если условие false;


        // Давайте сразу перейдем к примерам и разберем оператор в деле

        // Например нам нужно присвоить значение переменной, в зависимости от условия

        // создадим несколько переменных для последующих тестов

        int i = 10;
        int j = 15;

        int h = i < j ? 20 : 10;

        System.out.println(h);

        // Мы видим что у нас переменная h приняла значение 20, если бы мы задали что j < i то переменной h было бы присвоено
        // значение 10

        // На прошлом уроке мы с вами прошли конструкцию if-else, и для того чтобы наглядно увидеть разницу в записи,
        // реализуем данный пример при помощи if-else

        if(i < j){
            h = 20;
        } else {
            h = 10;
        }

        // вот такая конструкция у нас получается, данная запись равноценна нашей команде с тернарным оператором.




        // Далее рассмотрим чуть более сложный пример

        String s = i < j ? "Hello " : "Hi ";

        // Обратите внимание мы создаем строковую переменную, то есть переменную, у которой тип данных "строка", а далее в
        // условие у нас идут две переменных типа int , то есть в тернарном опрераторе важно, чтобы значение для переменной
        // присваивалось того же типа, что и созданная переменная ,то есть вот в этих операндах должен быть тот же тип данных что и
        // переменной s

        // В условии мы же можем сранивать что угодно. Этот момент иногда всплывает у новичков, и тут важно понять где и какие
        // типы данных можно использовать

        System.out.println(s + "world!");

        // в нашем примере мы использовали сложение строк, которое называется "конкатинация" (сложение) строк. С данным термином
        // вы будите сталкиваться очень часто и данные вопросы всегда есть на всевозможных тестах по java, пока что не буду
        // говорить почему эта тема так важна, вы узнаете об этом позже, я приведу примеры ошибок и решений которые
        // связаны со сложением строк. Скажу сразу, на практике это встречается постоянно, и уметь правильно складывать строки
        // может вам очень сильно упростить жизнь в будущем, а также как я уже сказал такие вопросы есть на тестированиях,
        // например перед собеседованием в одну команию мне дали прорешать тест в котором были вопросы на конкатинацию слов
        // с подковыркой, на внимательность и на знание, поэтому мы с вами подробнее затронем эту тему дальше.

        // Вернемся к тернарному оператору.

        // Мы рассмотрели пару вариантов работы тернарного оператора, это были простые варианты, теперь напишем тернарный
        // оператор с вложенным в него тернарным оператором, рассмотрим пример

        // Например мы хотим определить название месяца по цифре

        // Дана переменная

        int x = 3;

        // И теперь постоим следующую схему

        String month = x == 1 ? "январь" : x == 2 ? "февраль" : x == 3 ? "март" : "другой месяц";

        System.out.println(month);

        // Как мы видим, это тоже тернарный оператор, мы в этой конструкции нашли нужный нам месяц по значению
        // переменной х мы получили текстовую запись месяца. В такой конструкции есть минус, она плохо читается
        // в принципе вы скажите, что тут такого, прошлись по строке, посмотрели, все понятно, все прочитали,
        // но порой когда вы работаете с кодом скажем 3-5 часов не отрываясь и встретите такую конструкцию, мы можете ее сразу
        // не прочитать и даже сделать ошибку, например изменив в ней что то не то, что вам было нужно.
        // В java подобные конструкции часто упрощают следующим образом (перенести на следующую строку по знакам вопроса)
        // как мы видим, такую конструкцию читать гораздо проще, но в целом многоуровневые тернарные операторы используют
        // не так часто, как раз из за слабой читабельности кода.

        // Теперь вы знаете как можно построить тернарный оператор со вложенными условиями, в целом такая запись
        // не считается хорошим кодом, но она может вам встречаться.

        // Резумируем:
        // На данном уроке мы узнали что такое тернарный оператор. Освоили простые формы, а также форму со вложенными
        // условиями или же многоуровневый тернарный оператор.

        // Для лучшего закрепления материала ниже есть практические задания, которые помогут вам закрепить материал
        // обезательно прорешивайте задачи, потому что одной теории мало, вы дожны сами прочувствовать то как работает
        // код, и чем больше вы пишите кода, тем проще вам будет, и тем более сложные задачи вам будут поддаваться.




    }
}
